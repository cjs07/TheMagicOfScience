package com.deepwelldevelopment.tmos.core.asm;

import com.deepwelldevelopment.tmos.repack.codechicken.lib.asm.ASMInit;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import net.minecraft.launchwrapper.Launch;
import net.minecraft.launchwrapper.LaunchClassLoader;
import net.minecraftforge.fml.common.DummyModContainer;
import net.minecraftforge.fml.common.FMLLog;
import net.minecraftforge.fml.common.LoadController;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.discovery.ASMDataTable;
import net.minecraftforge.fml.common.event.FMLConstructionEvent;
import net.minecraftforge.fml.relauncher.FMLInjectionData;
import net.minecraftforge.fml.relauncher.IFMLCallHook;
import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;


@IFMLLoadingPlugin.SortingIndex( 1001 )
@IFMLLoadingPlugin.TransformerExclusions( { "com.deepwelldevelopment.tmos.core.asm" } )
public class TMOSLoadingPlugin implements IFMLLoadingPlugin {

    public static final String MC_VERSION = "1.11.2";
    public static final String MOD_ID = "tmos";
    public static final Logger MOD_LOG = LogManager.getLogger(MOD_ID);
    public static final String MOD_VERSION = "0.0.1";

    public static ArrayList<String> transformersList = new ArrayList<String>();
    public static boolean runtimeDeobfEnabled = false;
    public static ASMDataTable ASM_DATA = null;
    public static LaunchClassLoader loader = null;

    public static final String currentMcVersion;
    public static final File minecraftDir;
    public static final boolean obfuscated;

    static {

        boolean obf = true;
        try {
            obf = Launch.classLoader.getClassBytes("net.minecraft.world.World") == null;
        } catch (IOException e) {
        }
        obfuscated = obf;
        currentMcVersion = (String) FMLInjectionData.data()[4];
        minecraftDir = (File) FMLInjectionData.data()[6];
        loader = Launch.classLoader;
        attemptClassLoad(TMOSClassTransformer.class.getName(), "Failed to find Class Transformer! This is a critical Issue!");
        ASMInit.init();
    }

    public static void attemptClassLoad(String className, String failMessage) {
        try {
            Class.forName(className, false, TMOSLoadingPlugin.class.getClassLoader());
            transformersList.add(className);
        } catch (Throwable e) {
            FMLLog.warning(failMessage);
        }
    }

    @Override
    public String getAccessTransformerClass() {
        return null;
    }

    @Override
    public String[] getASMTransformerClass() {
        return transformersList.toArray(new String[1]);
    }

    @Override
    public String getModContainerClass() {
        return TMOSDummyContainer.class.getName();
    }

    @Override
    public String getSetupClass() {
        return TMOSDummyContainer.class.getName();
    }

    @Override
    public void injectData(Map<String, Object> data) {
        runtimeDeobfEnabled = (Boolean) data.get("runtimeDeobfuscationEnabled");
        if (data.containsKey("coremodLocation")) {
            myLocation = (File) data.get("coremodLocation");
        }
    }

    public File myLocation;

    public static class TMOSDummyContainer extends DummyModContainer implements IFMLCallHook {

        public TMOSDummyContainer() {

            super(new ModMetadata());
            ModMetadata md = getMetadata();
            md.autogenerated = true;
            md.modId = "<TMOS ASM>";
            md.name = md.description = "TMOS ASM";
            md.parent = "TMOS";
            md.version = "000";
        }

        @Override
        public boolean registerBus(EventBus bus, LoadController controller) {
            bus.register(this);
            return true;
        }

        @Subscribe
        public void construction(FMLConstructionEvent evt) {
            ASM_DATA = evt.getASMHarvestedData();
            TMOSClassTransformer.scrapeData(ASM_DATA);

            //for (ModCandidate t : ASM_DATA.getCandidatesFor("cofh.api.energy"));

        }

        @Override
        public void injectData(Map<String, Object> data) {
            loader = (LaunchClassLoader) data.get("classLoader");
            ASMHelper.isMCP = !(Boolean) data.get("runtimeDeobfuscationEnabled");
        }

        @Override
        public Void call() throws Exception {
            return null;
        }
    }
}
